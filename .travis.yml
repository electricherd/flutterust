# USE https://config.travis-ci.com/explore to check travis.yml
#
# https://docs.travis-ci.com/user/languages/android/
# android only up to trusty
# rust only up to bionic
# dart only up to xenial
#language: dart
env:
  global:
    - CRATE_NAME=audiofinder
    - ID_ANDROID_SDK_TOOLS=3859397

jobs:
  include:
    - os : linux
      dist: focal
      name: job_build_linux_20_04_nightly
      env: VER=LTS_20.04 TARGET=x86_64-unknown-linux-gnu
    - os : osx
      osx_image: xcode12
      name: job_macos10_15_nightly
      env: VER=MacOS10.15 TARGET=aarch64-apple-ios


addons:
  apt:
    packages:
      # additional for clang https://apt.llvm.org for focal (pop!_linux)
      #- lib32stdc++6
      #- lib32gcc1
      #- lib32gcc-s1
      #- libc6-i386
      # clang llvm (focal version is 10 - 11 with apt.llvm.org)
      - libllvm-10-ocaml-dev
      - libllvm10
      - llvm-10
      - llvm-10-dev
      - llvm-10-doc
      - llvm-10-examples
      - llvm-10-runtime
      # clang clang
      - clang-10
      - clang-tools-10
      - clang-10-doc
      - libclang-common-10-dev
      - libclang-10-dev
      - libclang1-10
      - clang-format-10
      - clangd-10
      # java (version 11 is default in)
      - openjdk-8-jdk
      # normal
      - p7zip-full
  homebrew:
    packages:
      # clang
      - llvm
      # normal
      - p7zip
    casks:
      - java8




before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock

cache:
  cargo: true
  directories:
    - "$HOME/.gradle/caches/"
    - "$HOME/.gradle/wrapper/"
    - "$HOME/.pub-cache"       # flutter

#before_install:
#  - echo y | sdkmanager "ndk-bundle"

before_script:
  - env

before_install:
 - export OLD_PATH=$PWD
 - echo $OLD_PATH
 - cd $HOME
 # download specific version
 - if [ $TRAVIS_OS_NAME == "linux" ]; then
       wget "https://dl.google.com/android/repository/sdk-tools-linux-${ID_ANDROID_SDK_TOOLS}.zip" -O $HOME/android-sdk.tgz;
   else
       wget "https://dl.google.com/android/repository/sdk-tools-darwin-${ID_ANDROID_SDK_TOOLS}.zip" -O $HOME/android-sdk.tgz;
   fi
 - mkdir -p android
 - unzip android-sdk.tgz -d android/sdk
 # licences (maybe platform specific, this is linux)
 - mkdir -p android/sdk/licenses
 - printf "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e" > android/sdk/licenses/android-sdk-license
 - printf "84831b9409646a918e30573bab4c9c91346d8abd" > android/sdk/licenses/android-sdk-preview-license
 # set paths
 - export PATH=$PATH:$HOME/android/sdk/tools:$HOME/android/sdk/tools/bin
 - export ANDROID_SDK_ROOT=$HOME/android/sdk
 # java 8 is 1.8, 11 is 1.11
 - if [ $TRAVIS_OS_NAME == "linux" ]; then
      export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64"; 
   fi
 - export DEFAULT_JVM_OPTS="-Dcom.android.sdklib.toolsdir=%~dp0\.. -XX:+IgnoreUnrecognizedVMOptions"
 - export JAVA_OPTS="-XX:+IgnoreUnrecognizedVMOptions"
 - sdkmanager --list
 - echo y | sdkmanager 'ndk-bundle' 
 # flutter
 - git clone https://github.com/flutter/flutter.git -b stable
 - ./flutter/bin/flutter config --no-analytics  
 - ./flutter/bin/flutter doctor


install:
  - echo $CRATE_NAME-$target-$TRAVIS_TAG
  # rustup
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ./rustup.sh
  - sh ./rustup.sh -y
  # rustup setup: source and nightly (flutterust only with nightly features)
  - source ~/.cargo/env || true  
  - rustup default nightly
  - rustup target add aarch64-linux-android wasm32-unknown-unknown armv7-linux-androideabi i686-linux-android x86_64-linux-android
  # only for ios
  - rustup target add aarch64-apple-ios x86_64-apple-ios
  # cargo programs
  - cargo install --force cargo-lipo
  - cargo install --force cargo-make
  - cargo install --force cargo-ndk
  - cargo install --force cargo-flutter
  - cargo install --force wasm-bindgen-cli
  - cargo install --force cbindgen
  - cargo install --force dart-bindgen --features cli

script:
  - echo $OLD_PATH
  - cd $OLD_PATH
  - cargo make