# USE https://config.travis-ci.com/explore to check travis.yml
#
# https://docs.travis-ci.com/user/languages/android/
# android only up to trusty
# rust only up to bionic
# dart only up to xenial
#language: dart
env:
  global:
    - CRATE_NAME=flutterustee
    - ID_ANDROID_SDK_TOOLS=3859397

jobs:
  include:
    - os : linux
      dist: focal
      name: job_build_linux_20_04_nightly
      env: VER=LTS_20.04
    - os : osx
      osx_image: xcode12
      name: job_macos10_15_nightly
      env: VER=MacOS10.15


addons:
  apt:
    packages:
      # additional for clang https://apt.llvm.org for focal (pop!_linux)
      #- lib32stdc++6
      #- lib32gcc1
      #- lib32gcc-s1
      #- libc6-i386
      # clang llvm (focal version is 10 - 11 with apt.llvm.org)
      - libllvm-10-ocaml-dev
      - libllvm10
      - llvm-10
      - llvm-10-dev
      - llvm-10-doc
      - llvm-10-examples
      - llvm-10-runtime
      # clang clang
      - clang-10
      - clang-tools-10
      - clang-10-doc
      - libclang-common-10-dev
      - libclang-10-dev
      - libclang1-10
      - clang-format-10
      - clangd-10
      # java (version 11 is default in)
      - openjdk-8-jdk
      # normal
      - jq
      - p7zip-full
  homebrew:
    packages:
      # clang
      - llvm
      # bundletool not need for ios build (only if apk would be build on ios, too)
      # bundletool
      # normal
      - jq
      - p7zip
    taps: homebrew/cask-versions
    casks:
      - adoptopenjdk8

before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock

cache:
  cargo: true
  directories:
    - "$HOME/.gradle/caches"
    - "$HOME/.gradle/wrapper"
    - "$HOME/.pub-cache"       # flutter
    - "$HOME/.cargo"

before_script:
  - env

before_install:
 - echo "building $TRAVIS_OS_NAME"
 - export OLD_PATH=$PWD
 - echo $OLD_PATH
 - cd $HOME
 - mkdir -p $HOME/bin
 # download specific version
 - if [ $TRAVIS_OS_NAME == "linux" ]; then
       wget "https://dl.google.com/android/repository/sdk-tools-linux-${ID_ANDROID_SDK_TOOLS}.zip" -O $HOME/android-sdk.tgz;
   else
       wget "https://dl.google.com/android/repository/sdk-tools-darwin-${ID_ANDROID_SDK_TOOLS}.zip" -O $HOME/android-sdk.tgz;
   fi
 - mkdir -p android
 - unzip android-sdk.tgz -d android/sdk
 # sdk licences (maybe platform specific, this is linux)
 - mkdir -p android/sdk/licenses
 - printf "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e" > android/sdk/licenses/android-sdk-license
 - printf "84831b9409646a918e30573bab4c9c91346d8abd" > android/sdk/licenses/android-sdk-preview-license
 # set sdk paths
 - export PATH=$PATH:$HOME/android/sdk/tools:$HOME/android/sdk/tools/bin:$HOME/bin
 - export ANDROID_SDK_ROOT=$HOME/android/sdk
 - export ANDROID_HOME=$HOME/android/sdk
 # java 8 is 1.8, 11 is 1.11 but doesn't work with sdkmanager
 - if [ $TRAVIS_OS_NAME == "linux" ]; then
      export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64"; 
   else
      export JAVA_HOME="$(/usr/libexec/java_home -v1.8)";
      /usr/libexec/java_home;
   fi
 - export DEFAULT_JVM_OPTS="-Dcom.android.sdklib.toolsdir=%~dp0\.. -XX:+IgnoreUnrecognizedVMOptions"
 - export JAVA_OPTS="-XX:+IgnoreUnrecognizedVMOptions"
 - echo $JAVA_HOME 
 - java -version
 # specific
 # "linux":
 #   - bundletool
 #   - ndk for linux
 # "osx":
 #   - wasm-bindgen as binary for ios to not build it
 - curl -s https://api.github.com/repos/rustwasm/wasm-bindgen/releases/latest | jq | grep browser_download_url
 - if [ $TRAVIS_OS_NAME == "linux" ]; then
      curl -s https://api.github.com/repos/google/bundletool/releases/latest | jq -r '.assets[].browser_download_url' | xargs wget -q -O bundletool.jar;
      sdkmanager --list;
      echo y | sdkmanager 'ndk-bundle';
      export ANDROID_NDK_HOME=$HOME/android/sdk/ndk-bundle;
   else
      curl -s https://api.github.com/repos/rustwasm/wasm-bindgen/releases/latest | jq -r '.assets[].browser_download_url' | grep apple-darwin | xargs wget -q -O wasm-bindgen-apple-darwin.tgz;
      tar -xvzf wasm-bindgen-apple-darwin.tgz --strip=1;
      mv -f wasm-bindgen $HOME/bin;
      mv -f wasm2es6js $HOME/bin;
   fi
 # flutter
 - git clone https://github.com/flutter/flutter.git -b stable
 - ./flutter/bin/flutter config --no-analytics  
 - ./flutter/bin/flutter doctor

install:
  - echo $CRATE_NAME-$TRAVIS_TAG
  # rustup
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ./rustup.sh
  - sh ./rustup.sh -y
  # rustup setup: source and nightly (flutterust only with nightly features)
  - source ~/.cargo/env || true  
  - rustup default nightly
  #- rustup target add wasm32-unknown-unknown
  # ios also: armv7-apple-ios i386-apple-ios
  - if [ $TRAVIS_OS_NAME == "linux" ]; then
       rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android;
    else
       rustup target add aarch64-apple-ios x86_64-apple-ios;
    fi
  # cargo programs 
  - cargo install cargo-make
  - if [ $TRAVIS_OS_NAME == "linux" ]; then
       cargo install cargo-ndk;
       cargo install cbindgen;
       cargo install wasm-bindgen-cli;
    else
       cargo install cargo-lipo;
       travis_wait 30 cargo install cbindgen;
       echo "no build wasm-bindgen used as binary";
    fi
  #
  - travis_wait 30 cargo install dart-bindgen --features cli
  # cargo flutter had 1149 sec for iOS!!!  
  - travis_wait 30 cargo install cargo-flutter  

script:
  - echo $OLD_PATH
  - cd $OLD_PATH
  - cargo fetch
  - cargo make
  - travis_wait 30 cargo build --offline
  - if [ $TRAVIS_OS_NAME == "linux" ]; then
       $HOME/flutter/bin/flutter build appbundle;
    else
       $HOME/flutter/bin/flutter build ios;
    fi

before_deploy:
  - if [ $TRAVIS_OS_NAME == "osx" ]; then
       bundletool build-apks --bundle=build/app/outputs/bundle/release/app-release.aab --output=$CRATE_NAME-universal.apks --overwrite --mode=universal;
    else
       java -jar $HOME/bundletool.jar build-apks --bundle=build/app/outputs/bundle/release/app-release.aab --output=$CRATE_NAME-universal.apks --overwrite --mode=universal;
    fi
  - export APK_PATH=artifacts
  - mkdir -p $APK_PATH/universal
  - unzip $CRATE_NAME-universal.apks -d $APK_PATH/universal
  # the universal
  - cp ${APK_PATH}/universal/universal.apk ${CRATE_NAME}-universal.apk
  #
  - export RELEASE_APK_FILES=$(ls *.apk)
  - echo "deploying $RELEASE_APK_FILES to GitHub releases"

deploy:
  api_key: $GitHubTokenToDeployFlRs
  overwrite: true
  file_glob: true
  file: 
    - ${CRATE_NAME}-universal.apk
  provider: releases
  skip_cleanup: true
  on:
    repo: electricherd/flutterust
    #tags: true
    branches:
      only:
        # release tags
        #- /^v\d+\.\d+\.\d+.*$/
        - master

ignore:
  - README.md
  - README-release.md
